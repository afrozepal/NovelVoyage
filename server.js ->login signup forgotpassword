const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(bodyParser.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect('mongodb+srv://afrozepal:TOdwAM50oSoqDvHG@nv.5rxrd80.mongodb.net/NovelVoyage')
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch(error => {
    console.error('Error connecting to MongoDB:', error);
  });

// Define a schema for your MongoDB collection
const userSchema = new mongoose.Schema({
  username: String,
  password: String,
  name: String,
  email: String,
  liked_books: { type: String, default: "" },
  read_count: { type: Number, default: 0 },
  saved_books: { type: String, default: "" },
}, { collection: 'userData', versionKey:false });

const User = mongoose.model('User', userSchema);

// Define routes
app.get('/api/userslala', (req, res) => {
  console.log('Fetching users...'); // Log before fetching users
  // Fetch users from MongoDB
  User.find().lean() // Convert Mongoose model instances to plain JavaScript objects
    .then(users => {
      console.log('Fetched users:', users); // Log fetched users to console
      res.setHeader('Content-Type', 'application/json'); // Set content type header
      res.json(users); // Send users as response to client
    })
    .catch(error => {
      console.error('Error fetching users:', error);
      res.status(500).json({ error: 'Internal server error' });
    });
});


// Route to handle adding a new user
app.post('/api/userslala', (req, res) => {
  console.log('Adding user...');
  const { username, password, email, name, liked_books, read_count, saved_books} = req.body; 

  // Log the received data
  console.log('Received Data:', { username, password, email, name, liked_books, read_count, saved_books });

  // Create a new User document using Mongoose
  User.create({ username, password, email, name, liked_books, read_count, saved_books})
    .then(createdUser => {
      console.log('User added:', createdUser); // Convert Mongoose model instance to plain JavaScript object
      const userData = createdUser.toObject(); // Extract user data
      res.status(201).json(userData); // Send only the user data as response
    })
    .catch(error => {
      console.error('Error adding user:', error);
      res.status(500).json({ error: 'Internal server error' });
    });
});


// Route to handle updating user password by username
app.put('/api/userslala/:username', (req, res) => {
  console.log('Updating user password...');
  const { username } = req.params;
  const { password } = req.body; 

  // Log the received data
  console.log('Received Data:', { username, password });

  // Find the user by username and update the password
  User.findOneAndUpdate({ username }, { password }, { new: true }) 
    .then(updatedUser => {
      if (!updatedUser) {
        return res.status(404).json({ error: 'User not found' });
      }
      console.log('User password updated:', updatedUser);
      res.json(updatedUser);
    })
    .catch(error => {
      console.error('Error updating user password:', error);
      res.status(500).json({ error: 'Internal server error' });
    });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});
